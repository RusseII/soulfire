{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ranks","rankArray","Object","keys","columns","title","dataIndex","key","render","record","toString","replace","App","useState","membersWhoNeedRank","setMembersWhoNeedRank","useEffect","a","fetch","soulfireMembers","console","log","json","members","membersUpgrade","body","forEach","member","memberRankIndex","findIndex","rank","length","memberNextRank","experience","name","push","getClanMembers","Title","dataSource","pagination","size","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2QAMMA,G,OAAQ,CAAC,SAAY,KAAU,QAAW,IAAW,WAAa,KAAU,QAAW,IAAW,QAAW,MAE7GC,EAAYC,OAAOC,KAAKH,GAExBI,EAAU,CACd,CACEC,MAAO,OACPC,UAAW,OACXC,IAAK,QAEP,CACEF,MAAO,eACPC,UAAW,OACXC,IAAK,QAEP,CACEF,MAAO,aACPC,UAAW,aACXC,IAAK,aACLC,OAAQ,SAACC,GAAD,OAAYA,EAAOC,WAAWC,QAAQ,wBAAyB,QA0C5DC,MArCf,WAAgB,IAAD,EACuCC,mBAAS,IADhD,mBACNC,EADM,KACcC,EADd,KA4Bb,OA1BAC,qBAAU,YAEY,uCAAG,gCAAAC,EAAA,sEACSC,MAAM,sCADf,cACfC,EADe,OAErBC,QAAQC,IAAIF,GAFS,SAGCA,EAAgBG,OAHjB,OAGfC,EAHe,OAIfC,EAAiB,GACvBJ,QAAQC,IAAIE,GAEVA,EAAQE,KAAKC,SAAS,SAACC,GAEvB,IAAMC,EAAkB3B,EAAU4B,WAAU,SAAAC,GAAI,OAAIA,IAASH,EAAOG,QACpE,GAAKF,GAAmB,GAAMA,EAAmB3B,EAAU8B,OAAS,EAAI,CACpE,IAAMC,EAAiB/B,EAAU2B,EAAkB,GAC1B5B,EAAMgC,GACRL,EAAOM,aAC1Bb,QAAQC,IAAIM,EAAOO,KAAO,IAAK,SAAWP,EAAOG,KAAO,IAAMH,EAAOM,WAAWvB,WAAWC,QAAQ,wBAAyB,MAC5Ha,EAAeW,KAAKR,QAIhCZ,EAAsBS,GAnBC,4CAAH,qDAqBpBY,KAEC,IAED,6BAEE,kBAAC,IAAWC,MAAZ,mEACA,kBAAC,IAAD,CAAOC,WAAYxB,EAAoBV,QAASA,EAASmC,YAAY,EAAOC,KAAK,UAHnF,MC/CgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAStC,OACP,kBAAC,IAAMuC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.1882ca4f.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { Table, Typography } from 'antd'\nimport 'antd/dist/antd.css'\n\n\n\nconst ranks = {\"Corporal\": 25000000, \"Sergant\": 100000000, \"Lieutenant\":250000000,\"Captain\": 400000000, \"General\": 500000000}\n\nconst rankArray = Object.keys(ranks)\n\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n  },\n  {\n    title: 'Current Rank',\n    dataIndex: 'rank',\n    key: 'rank',\n  },\n  {\n    title: 'Experience',\n    dataIndex: 'experience',\n    key: 'experience',\n    render: (record) => record.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n    // render (data): datatoString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n  },\n];\n\nfunction App() {\n  const [membersWhoNeedRank, setMembersWhoNeedRank] = useState([])\n  useEffect(() => {\n\n    const getClanMembers = async () => {\n      const soulfireMembers = await fetch('https://api.russell.work/runescape')\n      console.log(soulfireMembers)\n      const members = await soulfireMembers.json()\n      const membersUpgrade = []\n      console.log(members)\n    \n        members.body.forEach( (member) => {\n     \n        const memberRankIndex = rankArray.findIndex(rank => rank === member.rank)\n        if ((memberRankIndex >= 0) && memberRankIndex < (rankArray.length - 1)) {\n            const memberNextRank = rankArray[memberRankIndex + 1]\n            const memberNextRankXp = ranks[memberNextRank]\n            if (memberNextRankXp < member.experience) {\n                console.log(member.name + \" \", \"Rank: \" + member.rank + \" \" , member.experience.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"))\n                membersUpgrade.push(member)\n            }\n        }\n    })\n    setMembersWhoNeedRank(membersUpgrade)\n    }\n    getClanMembers()\n\n  }, [])\n  return (\n    <div>\n      {/* {membersWhoNeedRank.map((member) => <li>{member.name + \"   \" + \"Rank: \" + member.rank + \"     \" + member.experience}</li>)} */}\n      <Typography.Title>List of everyone who can rank up based on their current XP</Typography.Title>\n      <Table dataSource={membersWhoNeedRank} columns={columns} pagination={false} size='small' />;\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}